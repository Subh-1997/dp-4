1.Coin change

class Solution {
    public int ans(int i,int amount,int[]coins,int dp[][]){
        if(i==0){
           if(amount%coins[i]==0) return amount/coins[i];
           else  return (int) Math.pow(10, 9);
        }
        if(dp[i][amount]!=-1){
            return dp[i][amount];
        }
        int notPick = ans(i-1,amount,coins,dp);
        int pick = Integer.MAX_VALUE;
        if(coins[i]<=amount){
            pick = 1 + ans(i,amount-coins[i],coins,dp);
        }
        return dp[i][amount]=Math.min(notPick,pick);
    }
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int dp[][]=new int[n][amount+1];

        for(int row[]:dp){
            Arrays.fill(row,-1);
        }
        int res = ans(n-1,amount,coins,dp);
       if (res >= (int) Math.pow(10, 9))
            return -1;
        return res;
    }
}class Solution {
    public int ans(int i,int amount,int[]coins,int dp[][]){
        if(i==0){
           if(amount%coins[i]==0) return amount/coins[i];
           else  return (int) Math.pow(10, 9);
        }
        if(dp[i][amount]!=-1){
            return dp[i][amount];
        }
        int notPick = ans(i-1,amount,coins,dp);
        int pick = Integer.MAX_VALUE;
        if(coins[i]<=amount){
            pick = 1 + ans(i,amount-coins[i],coins,dp);
        }
        return dp[i][amount]=Math.min(notPick,pick);
    }
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int dp[][]=new int[n][amount+1];

        for(int row[]:dp){
            Arrays.fill(row,-1);
        }
        int res = ans(n-1,amount,coins,dp);
       if (res >= (int) Math.pow(10, 9))
            return -1;
        return res;
    }
}

2.Coin change 2

class Solution {
    public int solve(int i, int target, int[] coins, int dp[][]) {

        if (i == 0) {
           if(target%coins[0]==0){return 1;}
           else return 0;
        }
       
        if (dp[i][target] != -1) {
            return dp[i][target];
        }
        int pick = 0;
        if(coins[i]<=target){
            pick =  solve(i , target - coins[i], coins, dp);
        }
        int notPick = solve(i-1, target, coins, dp);
        return dp[i][target] = pick + notPick;
                
    }

    public int change(int amount, int[] coins) {
        int n = coins.length;

        int[][] dp = new int[n][amount + 1];
        for (int[] row : dp)
        Arrays.fill(row, -1);

        return solve(n - 1, amount, coins, dp);

        // for (int i = 0; i <=amount; i++) {
        //     dp[0][i] = 1;
        // }

        // for (int i = 1; i <n; i++) {
        //     for (int j = 0; j <= amount; j++) {
        //         int pick = 0;
        //         if (coins[i] <= j) {
        //             pick = dp[i][j - coins[i]];
        //         }
        //         int notPick = dp[i - 1][j];
        //         dp[i][j] = pick + notPick;

        //     }
        // }
        // return dp[n - 1][amount];
    }
}

3.. Partition Equal Subset Sum

class Solution {
    public boolean solve(int i, int target, int nums[], int dp[][]) {

        if (target == 0) {
            return true;
        }

        if (i == 0) {
            return nums[0] == target;
        }
        if (dp[i][target] != -1) {
            return dp[i][target] == 0 ? false : true;
        }
        boolean notPick = solve(i - 1, target, nums, dp);
        boolean pick = false;
        if (nums[i] <= target) {
            pick = solve(i - 1, target - nums[i], nums, dp);
        }
        dp[i][target] = pick || notPick ? 1 : 0;
        return pick || notPick;
    }

    public boolean canPartition(int[] nums) {

        int sum = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }

        if (sum % 2 == 1) {
            return false;
        } else {
            int target = sum / 2;
            // int dp[][] = new int[n][target + 1];
            // for (int row[] : dp)
            // Arrays.fill(row, -1);
            // return solve(n - 1, target, nums,dp);
            boolean dp[][] = new boolean[n][target + 1];

            for (int i = 0; i < nums.length; i++) {
                dp[i][0] = true;
            }

            if (nums[0] <= target) {
                dp[0][nums[0]] = true;
            }

            for (int i = 1; i < n; i++) {
                for (int j = 1; j <= target; j++) {
                    boolean notPick = dp[i - 1][j];
                    boolean pick = false;
                    if (nums[i] <= j) {
                        pick = dp[i - 1][j - nums[i]];
                    }
                    dp[i][j] = pick || notPick;
                }
            }
            return dp[n - 1][target];
        }
    }
}
